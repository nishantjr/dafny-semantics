#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
subprocess.check_call(['git', 'submodule', 'update', '--init', '--recursive'])
extdir = 'ext'
sys.path.append(os.path.join(os.path.dirname(__file__), extdir))

from kninja import *

# Build
# =====

proj = KProject(extdir = extdir)
def build_dafny(backend, alias, tangle_selector, flags = ''):
    return proj.definition( alias         = alias
                          , backend       = backend
                          , main          = 'dafny.md'
                          , flags         = '--syntax-module DAFNY ' + flags
                          , runner_script = './kdafny'
                          , tangle_selector = '.k,' + tangle_selector
                          )

unit_tests = []

verification = build_dafny(backend = 'haskell', alias = 'verification', tangle_selector='.verification')
verification.tests(glob = 't/*.dfy', alias = 'tests', flags = '--search-final')
unit_tests += [verification.proofs(inputs = ['t/proofs/unit-common.k'], alias = 't/proofs/unit-verification', flags = '--spec-module TEST')]

execution = build_dafny(backend = 'haskell', alias = 'execution', tangle_selector='.execution')
unit_tests += [execution.proofs(inputs = ['t/proofs/unit-common.k'], alias = 't/proofs/unit-execution', flags = '--spec-module TEST')]

proj.alias('unit-tests', unit_tests)

proj.main()
