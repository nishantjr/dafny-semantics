    {
      Result
    #Equals
      <generatedTop>
        <k>
          .
        </k>
        <methods>
          Main |-> method Main ( .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures true { assert Verify ( 0 , .ResultExps ) == 0 ;  assert Verify ( 3 , .ResultExps ) == 18 ;  .Statements }
          Verify |-> method Verify ( x : int , .ArgDecls ) returns ( r : int , .ArgDecls ) requires x > 0 ensures r > 0 { r := 2 * x ;  r := r * x ;  .Statements }
        </methods>
        <stack>
          .List
        </stack>
        <store>
          0 |-> ( _0:Int , var )
          1 |-> ( 2 *Int _0 *Int _0 , var )
        </store>
        <env>
          r |-> 1
          x |-> 0
        </env>
        <nextLoc>
          2
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      true
    #Equals
      2 *Int _0 *Int _0 >Int 0
    }
  #And
    {
      true
    #Equals
      _0 >Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          .
        </k>
        <methods>
          Main |-> method Main ( .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures true { assert Verify ( 0 , .ResultExps ) == 0 ;  assert Verify ( 3 , .ResultExps ) == 18 ;  .Statements }
          Verify |-> method Verify ( x : int , .ArgDecls ) returns ( r : int , .ArgDecls ) requires x > 0 ensures r > 0 { r := 2 * x ;  r := r * x ;  .Statements }
        </methods>
        <stack>
          .List
        </stack>
        <store>
          0 |-> ( _0:Int , var )
          1 |-> ( _00:Int , var )
        </store>
        <env>
          r |-> 1
          x |-> 0
        </env>
        <nextLoc>
          2
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      false
    #Equals
      _0 >Int 0
    }
