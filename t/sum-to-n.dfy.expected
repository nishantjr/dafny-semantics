    #Not ( {
      _10 +Int _11 *Int ( _11 +Int 1 ) /Int 2
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2
    } )
  #And
    {
      Result
    #Equals
      <generatedTop>
        <k>
          #success
        </k>
        <store>
          0 |-> _1:Int
          1 |-> _10:Int
          2 |-> _11:Int
        </store>
        <env>
          i |-> 2
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          3
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          #success
        </k>
        <store>
          0 |-> _1:Int
          1 |-> _1 *Int ( _1 +Int 1 ) /Int 2
          2 |-> _11:Int
        </store>
        <env>
          i |-> 2
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          3
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      _1 *Int ( _1 +Int 1 ) /Int 2 +Int _11 *Int ( _11 +Int 1 ) /Int 2
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2
    }
  #And
    {
      false
    #Equals
      _11 >Int 0
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
  #And
    {
      true
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2 >=Int 0
    }
  #And
    {
      true
    #Equals
      _1 >=Int 0
    }
  #And
    {
      true
    #Equals
      _11 >=Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          #success
        </k>
        <store>
          0 |-> _0:Int
          1 |-> _00:Int
        </store>
        <env>
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          2
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      false
    #Equals
      _0 >=Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          #success
        </k>
        <store>
          0 |-> _1:Int
          1 |-> _10 +Int _11
          2 |-> _11 -Int 1
        </store>
        <env>
          i |-> 2
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          3
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      _10 +Int _11 *Int ( _11 +Int 1 ) /Int 2
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2
    }
  #And
    {
      _10 +Int _11 +Int ( _11 -Int 1 ) *Int ( _11 -Int 1 +Int 1 ) /Int 2
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
  #And
    {
      true
    #Equals
      _1 >=Int 0
    }
  #And
    {
      true
    #Equals
      _10 +Int _11 >=Int 0
    }
  #And
    {
      true
    #Equals
      _10 >=Int 0
    }
  #And
    {
      true
    #Equals
      _11 -Int 1 >=Int 0
    }
  #And
    {
      true
    #Equals
      _11 >=Int 0
    }
  #And
    {
      true
    #Equals
      _11 >Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          #success
        </k>
        <store>
          0 |-> _1:Int
          1 |-> _10:Int
          2 |-> _11:Int
        </store>
        <env>
          i |-> 2
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          3
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      _10 +Int _11 *Int ( _11 +Int 1 ) /Int 2
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2
    }
  #And
    {
      false
    #Equals
      _1 >=Int 0
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
  #And
    {
      true
    #Equals
      _11 >=Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          #success
        </k>
        <store>
          0 |-> _1:Int
          1 |-> _10:Int
          2 |-> _11:Int
        </store>
        <env>
          i |-> 2
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          3
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      _10 +Int _11 *Int ( _11 +Int 1 ) /Int 2
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2
    }
  #And
    {
      false
    #Equals
      _10 >=Int 0
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
  #And
    {
      true
    #Equals
      _1 >=Int 0
    }
  #And
    {
      true
    #Equals
      _11 >=Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          #success
        </k>
        <store>
          0 |-> _1:Int
          1 |-> _10:Int
          2 |-> _11:Int
        </store>
        <env>
          i |-> 2
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          3
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      _10 +Int _11 *Int ( _11 +Int 1 ) /Int 2
    #Equals
      _1 *Int ( _1 +Int 1 ) /Int 2
    }
  #And
    {
      false
    #Equals
      _11 >=Int 0
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
