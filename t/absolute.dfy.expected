    {
      Result
    #Equals
      <generatedTop>
        <k>
          .
        </k>
        <methods>
          Main |-> method Main ( .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures true { assert Verify ( -3 , .ResultExps ) == 3 ;  assert Verify ( 0 , .ResultExps ) == 0 ;  assert Verify ( 3 , .ResultExps ) == 3 ;  .Statements }
          Verify |-> method Verify ( n : int , .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures r >= 0 { if ( n <= 0 ) { r := 0 - n ;  .Statements }  if ( n >= 0 ) { r := n ;  .Statements }  .Statements }
        </methods>
        <stack>
          .List
        </stack>
        <store>
          0 |-> ( _0:Int , var )
          1 |-> ( 0 -Int _0 , var )
        </store>
        <env>
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          2
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      false
    #Equals
      _0 >=Int 0
    }
  #And
    {
      true
    #Equals
      0 -Int _0 >=Int 0
    }
  #And
    {
      true
    #Equals
      _0 <=Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          .
        </k>
        <methods>
          Main |-> method Main ( .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures true { assert Verify ( -3 , .ResultExps ) == 3 ;  assert Verify ( 0 , .ResultExps ) == 0 ;  assert Verify ( 3 , .ResultExps ) == 3 ;  .Statements }
          Verify |-> method Verify ( n : int , .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures r >= 0 { if ( n <= 0 ) { r := 0 - n ;  .Statements }  if ( n >= 0 ) { r := n ;  .Statements }  .Statements }
        </methods>
        <stack>
          .List
        </stack>
        <store>
          0 |-> ( _0:Int , var )
          1 |-> ( _0:Int , var )
        </store>
        <env>
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          2
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      false
    #Equals
      _0 <=Int 0
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
#Or
    {
      Result
    #Equals
      <generatedTop>
        <k>
          .
        </k>
        <methods>
          Main |-> method Main ( .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures true { assert Verify ( -3 , .ResultExps ) == 3 ;  assert Verify ( 0 , .ResultExps ) == 0 ;  assert Verify ( 3 , .ResultExps ) == 3 ;  .Statements }
          Verify |-> method Verify ( n : int , .ArgDecls ) returns ( r : int , .ArgDecls ) requires true ensures r >= 0 { if ( n <= 0 ) { r := 0 - n ;  .Statements }  if ( n >= 0 ) { r := n ;  .Statements }  .Statements }
        </methods>
        <stack>
          .List
        </stack>
        <store>
          0 |-> ( _0:Int , var )
          1 |-> ( _0:Int , var )
        </store>
        <env>
          n |-> 0
          r |-> 1
        </env>
        <nextLoc>
          2
        </nextLoc>
      </generatedTop>
    }
  #And
    {
      true
    #Equals
      _0 <=Int 0
    }
  #And
    {
      true
    #Equals
      _0 >=Int 0
    }
